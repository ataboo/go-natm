// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWorkLogs(t *testing.T) {
	t.Parallel()

	query := WorkLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWorkLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := WorkLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WorkLogExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if WorkLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WorkLogExists to return true, but got false.")
	}
}

func testWorkLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	workLogFound, err := FindWorkLog(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if workLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWorkLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = WorkLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWorkLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := WorkLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWorkLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	workLogOne := &WorkLog{}
	workLogTwo := &WorkLog{}
	if err = randomize.Struct(seed, workLogOne, workLogDBTypes, false, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}
	if err = randomize.Struct(seed, workLogTwo, workLogDBTypes, false, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WorkLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWorkLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	workLogOne := &WorkLog{}
	workLogTwo := &WorkLog{}
	if err = randomize.Struct(seed, workLogOne, workLogDBTypes, false, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}
	if err = randomize.Struct(seed, workLogTwo, workLogDBTypes, false, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func workLogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkLog) error {
	*o = WorkLog{}
	return nil
}

func workLogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkLog) error {
	*o = WorkLog{}
	return nil
}

func workLogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *WorkLog) error {
	*o = WorkLog{}
	return nil
}

func workLogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WorkLog) error {
	*o = WorkLog{}
	return nil
}

func workLogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WorkLog) error {
	*o = WorkLog{}
	return nil
}

func workLogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WorkLog) error {
	*o = WorkLog{}
	return nil
}

func workLogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WorkLog) error {
	*o = WorkLog{}
	return nil
}

func workLogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkLog) error {
	*o = WorkLog{}
	return nil
}

func workLogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkLog) error {
	*o = WorkLog{}
	return nil
}

func testWorkLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &WorkLog{}
	o := &WorkLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, workLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WorkLog object: %s", err)
	}

	AddWorkLogHook(boil.BeforeInsertHook, workLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	workLogBeforeInsertHooks = []WorkLogHook{}

	AddWorkLogHook(boil.AfterInsertHook, workLogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	workLogAfterInsertHooks = []WorkLogHook{}

	AddWorkLogHook(boil.AfterSelectHook, workLogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	workLogAfterSelectHooks = []WorkLogHook{}

	AddWorkLogHook(boil.BeforeUpdateHook, workLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	workLogBeforeUpdateHooks = []WorkLogHook{}

	AddWorkLogHook(boil.AfterUpdateHook, workLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	workLogAfterUpdateHooks = []WorkLogHook{}

	AddWorkLogHook(boil.BeforeDeleteHook, workLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	workLogBeforeDeleteHooks = []WorkLogHook{}

	AddWorkLogHook(boil.AfterDeleteHook, workLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	workLogAfterDeleteHooks = []WorkLogHook{}

	AddWorkLogHook(boil.BeforeUpsertHook, workLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	workLogBeforeUpsertHooks = []WorkLogHook{}

	AddWorkLogHook(boil.AfterUpsertHook, workLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	workLogAfterUpsertHooks = []WorkLogHook{}
}

func testWorkLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(workLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := WorkLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkLogToOneTaskUsingTask(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WorkLog
	var foreign Task

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, workLogDBTypes, false, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TaskID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Task().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WorkLogSlice{&local}
	if err = local.L.LoadTask(ctx, tx, false, (*[]*WorkLog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Task == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Task = nil
	if err = local.L.LoadTask(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Task == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWorkLogToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WorkLog
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, workLogDBTypes, false, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WorkLogSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*WorkLog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWorkLogToOneSetOpTaskUsingTask(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WorkLog
	var b, c Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workLogDBTypes, false, strmangle.SetComplement(workLogPrimaryKeyColumns, workLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Task{&b, &c} {
		err = a.SetTask(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Task != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WorkLogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TaskID != x.ID {
			t.Error("foreign key was wrong value", a.TaskID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TaskID))
		reflect.Indirect(reflect.ValueOf(&a.TaskID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TaskID != x.ID {
			t.Error("foreign key was wrong value", a.TaskID, x.ID)
		}
	}
}
func testWorkLogToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WorkLog
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workLogDBTypes, false, strmangle.SetComplement(workLogPrimaryKeyColumns, workLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WorkLogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testWorkLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WorkLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	workLogDBTypes = map[string]string{`ID`: `uuid`, `TaskID`: `uuid`, `UserID`: `uuid`, `StartTime`: `timestamp without time zone`, `EndTime`: `timestamp without time zone`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testWorkLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(workLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(workLogAllColumns) == len(workLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWorkLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(workLogAllColumns) == len(workLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WorkLog{}
	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workLogDBTypes, true, workLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(workLogAllColumns, workLogPrimaryKeyColumns) {
		fields = workLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			workLogAllColumns,
			workLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WorkLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWorkLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(workLogAllColumns) == len(workLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := WorkLog{}
	if err = randomize.Struct(seed, &o, workLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WorkLog: %s", err)
	}

	count, err := WorkLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, workLogDBTypes, false, workLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkLog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WorkLog: %s", err)
	}

	count, err = WorkLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
