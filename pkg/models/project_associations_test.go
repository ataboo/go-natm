// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProjectAssociations(t *testing.T) {
	t.Parallel()

	query := ProjectAssociations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProjectAssociationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectAssociations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectAssociationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProjectAssociations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectAssociations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectAssociationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectAssociationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectAssociations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectAssociationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProjectAssociationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProjectAssociation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProjectAssociationExists to return true, but got false.")
	}
}

func testProjectAssociationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	projectAssociationFound, err := FindProjectAssociation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if projectAssociationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProjectAssociationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProjectAssociations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProjectAssociationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProjectAssociations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProjectAssociationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	projectAssociationOne := &ProjectAssociation{}
	projectAssociationTwo := &ProjectAssociation{}
	if err = randomize.Struct(seed, projectAssociationOne, projectAssociationDBTypes, false, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}
	if err = randomize.Struct(seed, projectAssociationTwo, projectAssociationDBTypes, false, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectAssociationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectAssociationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectAssociations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProjectAssociationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	projectAssociationOne := &ProjectAssociation{}
	projectAssociationTwo := &ProjectAssociation{}
	if err = randomize.Struct(seed, projectAssociationOne, projectAssociationDBTypes, false, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}
	if err = randomize.Struct(seed, projectAssociationTwo, projectAssociationDBTypes, false, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectAssociationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectAssociationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectAssociations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func projectAssociationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectAssociation) error {
	*o = ProjectAssociation{}
	return nil
}

func projectAssociationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectAssociation) error {
	*o = ProjectAssociation{}
	return nil
}

func projectAssociationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProjectAssociation) error {
	*o = ProjectAssociation{}
	return nil
}

func projectAssociationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectAssociation) error {
	*o = ProjectAssociation{}
	return nil
}

func projectAssociationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectAssociation) error {
	*o = ProjectAssociation{}
	return nil
}

func projectAssociationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectAssociation) error {
	*o = ProjectAssociation{}
	return nil
}

func projectAssociationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectAssociation) error {
	*o = ProjectAssociation{}
	return nil
}

func projectAssociationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectAssociation) error {
	*o = ProjectAssociation{}
	return nil
}

func projectAssociationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectAssociation) error {
	*o = ProjectAssociation{}
	return nil
}

func testProjectAssociationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProjectAssociation{}
	o := &ProjectAssociation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation object: %s", err)
	}

	AddProjectAssociationHook(boil.BeforeInsertHook, projectAssociationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	projectAssociationBeforeInsertHooks = []ProjectAssociationHook{}

	AddProjectAssociationHook(boil.AfterInsertHook, projectAssociationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	projectAssociationAfterInsertHooks = []ProjectAssociationHook{}

	AddProjectAssociationHook(boil.AfterSelectHook, projectAssociationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	projectAssociationAfterSelectHooks = []ProjectAssociationHook{}

	AddProjectAssociationHook(boil.BeforeUpdateHook, projectAssociationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	projectAssociationBeforeUpdateHooks = []ProjectAssociationHook{}

	AddProjectAssociationHook(boil.AfterUpdateHook, projectAssociationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	projectAssociationAfterUpdateHooks = []ProjectAssociationHook{}

	AddProjectAssociationHook(boil.BeforeDeleteHook, projectAssociationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	projectAssociationBeforeDeleteHooks = []ProjectAssociationHook{}

	AddProjectAssociationHook(boil.AfterDeleteHook, projectAssociationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	projectAssociationAfterDeleteHooks = []ProjectAssociationHook{}

	AddProjectAssociationHook(boil.BeforeUpsertHook, projectAssociationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	projectAssociationBeforeUpsertHooks = []ProjectAssociationHook{}

	AddProjectAssociationHook(boil.AfterUpsertHook, projectAssociationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	projectAssociationAfterUpsertHooks = []ProjectAssociationHook{}
}

func testProjectAssociationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectAssociations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectAssociationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(projectAssociationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProjectAssociations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectAssociationToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectAssociation
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectAssociationDBTypes, false, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProjectAssociationSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*ProjectAssociation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectAssociationToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectAssociation
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectAssociationDBTypes, false, strmangle.SetComplement(projectAssociationPrimaryKeyColumns, projectAssociationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectAssociations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ID)
		}
	}
}

func testProjectAssociationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectAssociationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectAssociationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectAssociationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectAssociations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	projectAssociationDBTypes = map[string]string{`ID`: `uuid`, `ProjectID`: `uuid`, `Email`: `character varying`, `Association`: `enum.associations_enum('Owner','Writer','Reader')`}
	_                         = bytes.MinRead
)

func testProjectAssociationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(projectAssociationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(projectAssociationAllColumns) == len(projectAssociationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectAssociations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProjectAssociationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(projectAssociationAllColumns) == len(projectAssociationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectAssociation{}
	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectAssociations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectAssociationDBTypes, true, projectAssociationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(projectAssociationAllColumns, projectAssociationPrimaryKeyColumns) {
		fields = projectAssociationAllColumns
	} else {
		fields = strmangle.SetComplement(
			projectAssociationAllColumns,
			projectAssociationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProjectAssociationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProjectAssociationsUpsert(t *testing.T) {
	t.Parallel()

	if len(projectAssociationAllColumns) == len(projectAssociationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProjectAssociation{}
	if err = randomize.Struct(seed, &o, projectAssociationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectAssociation: %s", err)
	}

	count, err := ProjectAssociations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, projectAssociationDBTypes, false, projectAssociationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectAssociation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectAssociation: %s", err)
	}

	count, err = ProjectAssociations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
